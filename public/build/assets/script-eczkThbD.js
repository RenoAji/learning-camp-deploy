const y=document.querySelector('[data-action="add-section"]'),q=document.getElementById("courseForm");y.onclick=E;window.location.pathname.split("/")[window.location.pathname.split("/").length-1]=="edit"&&(document.querySelectorAll('[data-action="delete-section"]').forEach(function(e){e.onclick=function(t){x(t)}}),document.querySelectorAll('[data-action="delete-quiz"]').forEach(function(e){e.onclick=function(t){g(t)}}),document.querySelectorAll('[data-action="delete-question"]').forEach(function(e){e.onclick=function(t){S(t)}}),document.querySelectorAll('[data-action="delete-answer"]').forEach(function(e){e.onclick=function(t){v(t)}}),document.querySelectorAll('[data-action="add-quiz"]').forEach(function(e){e.onclick=function(t){h(t)}}),document.querySelectorAll('[data-action="add-question"]').forEach(function(e){e.onclick=function(t){w(t)}}),document.querySelectorAll('[data-action="add-answer"]').forEach(function(e){e.onclick=function(t){A(t)}}));q.addEventListener("submit",function(e){e.preventDefault(),fetch(q.action,{method:"post",body:new FormData(q,e.submitter)}).then(t=>t.json()).then(t=>{if(t.redirect)window.location.replace(t.redirect);else{const r=document.createElement("div");r.role="alert",r.classList.add("alert","alert-error"),r.innerHTML=` <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                                <span>${t.message}</span>`,document.querySelector('[role="alert"]')?document.querySelector('[role="alert"]').replaceWith(r):document.body.insertBefore(r,document.body.firstElementChild),document.body.scrollTop=0,document.documentElement.scrollTop=0}}).catch(t=>{console.error("Error:",t)})});function E(){const e=document.querySelectorAll('[data-element="section"]').length,t=document.createElement("div");t.classList.add("border-b-2","border-slate-500"),t.setAttribute("data-element","section"),t.innerHTML=`
                                <h1 class="text-xl flex content-center gap-2">
                                    Section ${e+1}
                                    <div class="tooltip" data-tip="Delete Section">
                                        <button class="btn btn-square btn-error mt-1 btn-xs" data-action="delete-section" type="button" >
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                                        </button>  
                                    </div>
                                </h1>
                                <label class="input input-bordered flex items-center gap-2">
                                    Section Title:
                                    <input type="text" class="grow" placeholder="Title" name="sections[${e}][title]" required />
                                </label>
                                <label class="input flex items-center">Section Content</label>
                                <input id="section-${e}-content" type="hidden" name="sections[${e}][content]" required >
                                <trix-editor input="section-${e}-content"></trix-editor>
                                <button class="btn btn-active btn-neutral mt-1" data-action="add-quiz" type="button">
                                    Add Quiz to this section
                                </button>`,t.querySelector('[data-action="delete-section"]').onclick=function(r){x(r)},t.querySelector('[data-action="add-quiz"]').onclick=function(r){h(r)},q.insertBefore(t,y)}function h(e){const t=e.currentTarget.closest('[data-element="section"]'),r=Array.prototype.indexOf.call(document.querySelectorAll('[data-element="section"]'),t),o=document.createElement("div");o.classList.add("border","border-slate-400","ml-3","m-2","space-y-2","p-2"),o.setAttribute("data-element","quiz"),o.innerHTML=`<h1 class="text-xl mb-2">
                                Quiz
                                <div class="tooltip" data-tip="Delete Quiz">
                                    <button type="button" class="btn btn-square btn-error mt-1 btn-xs" data-action="delete-quiz">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                                    </button>  
                                </div>
                            </h1>
                            <label class="input input-bordered flex items-center gap-2">
                                Minimum Grade:
                                <input type="number" class="grow" placeholder="minimum grade for student to pass" name="sections[${r}][minimum_grade]" min=0 max=100 required />
                            </label>
                            <p>Check the radio button to set the correct answer</p>

                            <button class="btn btn-active btn-neutral mt-1" type="button" data-action="add-question">
                                Add Question
                            </button>`,o.querySelector('[data-action="add-question"]').onclick=function(n){w(n)},o.querySelector('[data-action="delete-quiz"]').onclick=function(n){g(n)},e.currentTarget.parentElement.insertBefore(o,e.currentTarget),e.currentTarget.style.display="none",o.querySelector('[data-action="add-question"]').click()}function w(e){const t=e.currentTarget.closest('[data-element="section"]'),r=Array.prototype.indexOf.call(document.querySelectorAll('[data-element="section"]'),t),o=t.querySelectorAll('[data-element="question"]').length,n=document.createElement("div");n.setAttribute("data-element","question"),n.innerHTML=` <h1 class="text-l mb-2">
                                    Question ${o+1}
                                    <div class="tooltip" data-tip="Delete Question">
                                        <button type="button" class="btn btn-square btn-error mt-1 btn-xs" data-action="delete-question">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                                        </button>  
                                    </div>
                                </h1>
                                <label class="input input-bordered flex items-center gap-2">
                                    Question ${o+1}:
                                    <input type="text" class="grow" placeholder="Title" name="sections[${r}][questions][${o}][question]" required />
                                </label>
                                <button class="btn btn-active btn-neutral mt-1" type="button" data-action="add-answer" >
                                    Add Answer
                                </button>`,n.classList.add("border-b","border-black","p-2"),n.querySelector('[data-action="delete-question"]').onclick=function(s){S(s)},n.querySelector('[data-action="add-answer"]').onclick=function(s){A(s)},e.target.parentNode.insertBefore(n,e.target),n.querySelector('[data-action="add-answer"]').click(),n.querySelector('[data-action="add-answer"]').click()}function A(e){const t=e.currentTarget.closest('[data-element="question"]'),r=e.currentTarget.closest('[data-element="section"]'),o=t.querySelectorAll('[data-element="answer"]').length,n=Array.prototype.indexOf.call(document.querySelectorAll('[data-element="section"]'),r),s=Array.prototype.indexOf.call(r.querySelectorAll('[data-element="question"]'),t),c=document.createElement("label");c.setAttribute("data-element","answer"),c.classList.add("input","input-bordered","flex","items-center","gap-2"),c.innerHTML=`  Answer ${o+1}:
                                <input type="text" class="grow" placeholder="Title" name="sections[${n}][questions][${s}][answers][${o}][text]" required/>
                                <input type="radio" name="sections[${n}][questions][${s}][correct]" class="radio" value=${o} />
                                <div class="tooltip" data-tip="Delete Answer">
                                    <button type="button" class="btn btn-square btn-error mt-1 btn-xs" data-action="delete-answer">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                                    </button>  
                                </div>`,c.querySelector('[type="radio"]').checked=o==0,e.target.parentNode.insertBefore(c,e.target),c.querySelector('[data-action="delete-answer"]').onclick=function(i){v(i)}}function x(e){const t=e.currentTarget.closest('[data-element="section"]'),r=Array.prototype.indexOf.call(document.querySelectorAll('[data-element="section"]'),t);t.remove();const o=document.querySelectorAll('[data-element="section"]');for(let n=r;n<o.length;n++){const s=o[n],c=s.firstElementChild.firstChild,i=s.querySelector(`[name="sections[${n+1}][title]"`),a=s.querySelector(`[name="sections[${n+1}][content]"`),l=s.querySelector("trix-editor");c.replaceWith(document.createTextNode("Section "+(n+1))),i.setAttribute("name",`sections[${n}][title]`),a.setAttribute("name",`sections[${n}][content]`),a.setAttribute("id",`section-${n}-content`),l.setAttribute("input",`section-${n}-content`),s.querySelectorAll('[data-element="question"').forEach(function(d,u){d.querySelector("label").querySelector("input").setAttribute("name",`sections[${n}][questions][${u}][question]`),d.querySelectorAll('[data-element="answer"]').forEach(function(p,f){const k=p.firstElementChild,$=p.children[1];k.setAttribute("name",`sections[${n}][questions][${u}][answers][${f}]`),$.setAttribute("name",`sections[${n}][questions][${u}][correct]`)})})}}function g(e){e.currentTarget.closest('[data-element="quiz"]').parentElement.querySelector('[data-action="add-quiz"]').style.display="initial",e.currentTarget.closest('[data-element="quiz"]').remove()}function S(e){const t=e.currentTarget.closest('[data-element="question"]'),r=t.closest('[data-element="section"]'),o=Array.prototype.indexOf.call(document.querySelectorAll('[data-element="section"]'),r),n=Array.prototype.indexOf.call(r.querySelectorAll('[data-element="question"]'),t);t.remove();const s=r.querySelectorAll('[data-element="question"]');for(let c=n;c<s.length;c++){const i=s[c],a=i.firstElementChild.firstChild,l=i.querySelector("label"),d=l.firstChild,u=l.querySelector("input");console.log(c),a.replaceWith(document.createTextNode("Question "+(c+1))),d.replaceWith(document.createTextNode("Question "+(c+1))),u.setAttribute("name",`sections[${o}][questions][${c}][question]`),i.querySelectorAll('[data-element="answer"]').forEach(function(m,b){const p=m.firstElementChild,f=m.children[1];p.setAttribute("name",`sections[${o}][questions][${c}][answers][${b}]`),f.setAttribute("name",`sections[${o}][questions][${c}][correct]`)})}}function v(e){const t=e.currentTarget.closest('[data-element="question"]'),r=e.currentTarget.closest('[data-element="section"]'),o=Array.prototype.indexOf.call(r.querySelectorAll('[data-element="question"]'),t),n=Array.prototype.indexOf.call(document.querySelectorAll('[data-element="section"]'),r),s=e.currentTarget.closest('[data-element="answer"]'),c=Array.prototype.indexOf.call(t.querySelectorAll('[data-element="answer"]'),s);s.remove();const i=t.querySelectorAll('[data-element="answer"]');for(let a=c;a<i.length;a++){const l=i[a],d=l.firstChild,u=l.firstElementChild,m=l.children[1];d.replaceWith(document.createTextNode("Answer "+(a+1)+":")),u.setAttribute("name",`sections[${n}][questions][${o}][answers][${c}]`),m.setAttribute("name",`sections[${n}][questions][${o}][correct]`)}}document.addEventListener("trix-attachment-add",function(e){e.attachment.file&&T(e.attachment)});function T(e){C(e.file,t,r);function t(o){e.setUploadProgress(o)}function r(o){e.setAttributes(o)}}function C(e,t,r){var o=new FormData;o.append("file",e);var n=new XMLHttpRequest;n.open("post","/attachment",!0);const s=document.getElementsByName("csrf-token")[0].content;n.setRequestHeader("X-CSRF-TOKEN",s),n.upload.addEventListener("progress",function(c){var i=c.loaded/c.total*100;t(i)}),n.addEventListener("load",function(c){if(n.status==200){var i=n.responseText,a={url:i,href:i+"/?content-disposition=attachment"};r(a)}}),n.send(o)}
